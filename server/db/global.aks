//批量创建数据库和表格
"api/init.aks"();

//redis连接
redisConfig=json(file_get_contents("config/global_redis.json"));
rd=AKRedis(redisConfig);
//清理所有redis节点缓存
rd.clean();

db=readDBConfig("config/db.json","define/db_table.json");//读取数据库配置
cnnPool=AKMysqlCnnPool();//mysql连接池
dbMaker=AKDatabaseMaker(cnnPool);//数据库创建器
dbMaker.make(db.cnn_global,db.db_global);//创建或升级数据库

//mysql连接
cnn=dbMaker.new_db_cnn_and_select_db(db.cnn_global);

//升级全局变量表
userData=dict();
structMgr=structMgr_create();
structMgr_load(structMgr,file_get_contents("struct/global_db_var.h"));
arr=structMgr_getNameArr(structMgr,"Var",arr());
c=size(arr);
i=0;while(i<c)
{
	type=arr[i+1];
	if(type==50)//对象成员
	{
		name=arr[i];
		typeName=arr[i+2];
		//trace(typeName);
		row=rd.updateRow
		(
			cnn,"global_var","name",name,"*",
			//修改回调
			##<row,userData>
				@link structMgr,typeName;
				jsonStr=row.json;
				if(jsonStr=="")
				{
					json=structMgr_upgradeObj(structMgr,typeName,dict());
					row.json=json_encode(json);
				}
				else
				{
					json=json_decode(jsonStr);
					structMgr_upgradeObj(structMgr,typeName,json);
					row.json=json_encode(json);
				}
				return(1);//修改
			##.,
			//修改完成回调
			##<row,userData>
				//...
			##.,
			//解锁后回调
			##<row,userData>
				//...
			##.,
			userData,//自定义数据userData
			1000//加锁时间（毫秒），例如：1000
		);
		if(empty(row))//数据不存在
		{
			jsonStr=json_encode(structMgr_upgradeObj(structMgr,typeName,dict()));
			sql="insert into global_var set ";
			sql+="name=\""+str_c_escape(name)+"\"";
			sql+=",json=\""+str_c_escape(jsonStr)+"\"";
			// trace(sql);
			mysqlExec(cnn,sql);
		}
		trace("upgrade global_var "+name+" complete");
	}
	i+=3;
}
//debug(arr);

trace("ok");
quitSystem();